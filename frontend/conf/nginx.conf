server {
  listen 80;  # Listen for incoming HTTP requests on port 80

  # When a request comes in that starts with /api/
  location /api/ {
    # Note:
    # It is recommended to use the internal Kubernetes DNS (e.g., tasks-service.default) instead of a direct IP address in the Nginx configuration.
    # 
    # 1. The IP address of a service in Kubernetes can change frequently (e.g., after a restart or scale of the Pod). If you use a direct IP address in the configuration, Nginx may encounter issues because the IP can change.
    # 
    # 2. Kubernetes' internal DNS automatically updates to point to the active Pod, so by using DNS (e.g., tasks-service.default), Nginx will always point to the active service even if the Pod's IP changes.
    # 
    # 3. If you're not using Kubernetes and know the service has a fixed IP address, you can use the direct IP, but this is not recommended when working with Kubernetes.

    # So to clerify if we were to use it like this - hard coded it would theoretically work but is not recommended for 
    # the reasons we mentioned.

    # Forward (proxy) the request to the internal backend service named 'tasks-service'
    # running in the 'default' namespace in Kubernetes, on port 8000
    # proxy_pass http://localhost:8000/;
    proxy_pass http://tasks-service.default:8000/;

    # For example:
    # A request to /api/tasks will be forwarded to http://tasks-service.default:8000/tasks
    # Note: The trailing slash (/) at the end of both /api/ and the proxy_pass URL
    # ensures that the rest of the path (e.g., tasks) is preserved correctly
  }
  
  location / {
    root /usr/share/nginx/html;  # Serve static files from this directory
    index index.html index.htm;  # Default files to serve if directory is requested
    try_files $uri $uri/ /index.html =404;  # Try to serve file or folder; fallback to index.html (SPA support), otherwise return 404
  }
  
  include /etc/nginx/extra-conf.d/*.conf;  # Include additional configuration files from this directory
}