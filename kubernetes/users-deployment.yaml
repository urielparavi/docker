apiVersion: apps/v1  
kind: Deployment 
metadata: 
  name: users-deployment
spec: 
  replicas: 1
  selector: 
    matchLabels:  
      app: users
  template: 
    metadata: 
      labels:
        app: users 
    spec:
      containers: 
        - name: users 
          image: urielpa/kub-demo-users:latest
          # We can create file fo environment variables of to that on the fly like here.

          # localhost - For pod internal communication, so when 2 containers run in the same pod, Kubernetes allows us to send
          # request to the localhost address and then using the port which is exposed by the other container (the users).
          # So localhost is the magic address we can use inside of a pod. So if we have one container running in a pod, 
          # which executes some code which also runs on the server side so to say, inside of the pod and that code needs an
          # address we can use localhost as an adress if wanna send a request to another container running in the same pod.
          env: 
            - name: AUTH_ADDRESS 
              # value: localhost
              # So for the Signup in users-app.js we use the manually approach to show also that we can use the IP of the
              # service of the auth-service object by pulling its IP from kubectl get svc. 
              # So we show both way - the manually aproach like here, and the auto-generated environment variable by kubernetes
              # (check on users-app.js in the login for more details)
              # value: "10.111.132.114"
              # CoreDNS- Kubernetes come with a built-in service called CoreDNS -is a domain name service which in the end 
              # helps with creating domain names, and here we tallking about cluster internal domain names
              # ***Sidenote*** - coreDns, so the DNS that we tallking about here, it's not the domain name system, 
              # but domain name service, so the domain name for our service.

              # We get the IP of the service object through coreDns - automatically generated domain which be konwn inside of 
              # cluster, and we get DNS of this service when we do 'kubectl' get svc, or we can just
              # look on the service name in the auth-service.yaml - and in our case, it's "auth-service"
              # namespace - concept which allow us to assign services and deployments, pods etc, to different namespaces within
              # one of the same cluster to for example assign them do different teams or projects or whatever, so it's simply
              # a way of differentianting and grouping our resources could say, and we can see which namespaces we get by 
              # running 'kubectl' get namespaces, and in our case it's the default since we didn't define anything 
              # .default - Our namespace 
              value: "auth-service.default"
        # - name: auth
        #   image: urielpa/kub-demo-auth:latest
